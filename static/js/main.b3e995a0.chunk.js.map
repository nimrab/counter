{"version":3,"sources":["CountScreen/CountScreen.tsx","Button/Button.tsx","bll/store/counter-reducer.ts","CountCopmponent/CountComponent.tsx","SetScreen/SetScreen.tsx","SetComponent/SetComponent.tsx","App.tsx","reportWebVitals.ts","bll/store/store.ts","utils/localstorage-utils.ts","index.tsx","App.module.css","SetScreen/SetScreen.module.css","CountScreen/CountScreen.module.css"],"names":["CountScreen","props","className","css","screen","currentCount","maxCount","valueIsSet","red","span_set","Button","onClick","callback","disabled","disable","name","initialState","startCount","setCurrentCountAC","value","type","switchValueIsSetAC","CountComponent","dispatch","useDispatch","counter","useSelector","state","button_block","btnClassName","disableInc","disableReset","SetScreen","inputClassName","input","error","screen_error","setScreenBox","value_input_box","spanText","onChange","event","currentTarget","SetComponent","disableSet","App","button","main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","preloadedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b3e995a0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport css from './CountScreen.module.css'\r\n\r\ntype ScreenPropsType = {\r\n    maxCount: number\r\n    currentCount: number\r\n    valueIsSet:boolean\r\n}\r\n\r\nexport const CountScreen = (props: ScreenPropsType) => {\r\n\r\n    const className=`${css.screen} ${props.currentCount === props.maxCount && props.valueIsSet ? css.red : \"\"}`\r\n\r\n    return (\r\n\r\n        <div className={className}>\r\n            {\r\n                props.valueIsSet\r\n                ? props.currentCount\r\n                : <span className={css.span_set}>setting value...</span>\r\n            }\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}","import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    className?: string\r\n    disable?: boolean\r\n}\r\n\r\n\r\nexport const Button = (props:ButtonPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.callback()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={props.className}\r\n            onClick={onClickHandler}\r\n            disabled={props.disable}\r\n        >\r\n            {props.name}\r\n        </button>\r\n\r\n    )\r\n\r\n\r\n}","export type CounterReducerAT =\r\n    SetCurrentCountACType\r\n    | SetStartCountACType\r\n    | setMaxCountACType\r\n    | switchErrorACACType\r\n    | switchValueIsSetACType\r\n\r\ntype initialStateType = {\r\n    startCount: number\r\n    maxCount: number\r\n    currentCount: number\r\n    valueIsSet: boolean\r\n}\r\n\r\nconst initialState = {\r\n    startCount: 0,\r\n    maxCount: 10,\r\n    currentCount: 0,\r\n    valueIsSet: false,\r\n}\r\n\r\nexport const counterReducer = (state: initialStateType = initialState, action: CounterReducerAT): initialStateType => {\r\n    switch (action.type) {\r\n        case 'INCREASE-CURRENT-COUNT':\r\n            return {...state, currentCount: action.value}\r\n        case 'SET-START-COUNT':\r\n            return {...state, startCount: action.value}\r\n        case 'SET-MAX-COUNT':\r\n            return {...state, maxCount: action.value}\r\n        case 'SWITCH-VALUE-IS-SET':\r\n            return {...state, valueIsSet: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype SetCurrentCountACType = ReturnType<typeof setCurrentCountAC>\r\ntype SetStartCountACType = ReturnType<typeof setStartCountAC>\r\ntype setMaxCountACType = ReturnType<typeof setMaxCountAC>\r\ntype switchErrorACACType = ReturnType<typeof switchErrorAC>\r\ntype switchValueIsSetACType = ReturnType<typeof switchValueIsSetAC>\r\n\r\nexport const setCurrentCountAC = (value: number) => {\r\n    return {\r\n        type: 'INCREASE-CURRENT-COUNT',\r\n        value\r\n    } as const\r\n}\r\nexport const setStartCountAC = (value: number) => {\r\n    return {\r\n        type: 'SET-START-COUNT',\r\n        value\r\n    } as const\r\n}\r\nexport const setMaxCountAC = (value: number) => {\r\n    return {\r\n        type: 'SET-MAX-COUNT',\r\n        value\r\n    } as const\r\n}\r\nexport const switchErrorAC = (value: boolean) => {\r\n    return {\r\n        type: 'SWITCH-ERROR',\r\n        value\r\n    } as const\r\n}\r\nexport const switchValueIsSetAC = (value: boolean) => {\r\n    return {\r\n        type: 'SWITCH-VALUE-IS-SET',\r\n        value\r\n    } as const\r\n}\r\n\r\n","import React from 'react';\r\nimport {CountScreen} from \"../CountScreen/CountScreen\";\r\nimport css from \"../App.module.css\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {AppType} from \"../App\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../bll/store/store\";\r\nimport {setCurrentCountAC} from \"../bll/store/counter-reducer\";\r\n\r\n\r\ntype CountComponentPropsType = {\r\n\r\n    disableInc: boolean\r\n    disableReset: boolean\r\n    btnClassName: string\r\n}\r\n\r\nexport const CountComponent = (props: CountComponentPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const counter = useSelector<RootReducerType, AppType>(state=> state.counter)\r\n\r\n    const incrementCount = () => {\r\n        //increase counter by 1\r\n        dispatch(setCurrentCountAC(counter.currentCount + 1))\r\n    }\r\n\r\n    const resetCount =() => {\r\n        dispatch(setCurrentCountAC(counter.startCount))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <CountScreen\r\n                currentCount={counter.currentCount}\r\n                maxCount={counter.maxCount}\r\n                valueIsSet={counter.valueIsSet}\r\n            />\r\n\r\n            <div className={css.button_block}>\r\n\r\n                <Button\r\n                    name={'inc'}\r\n                    callback={incrementCount}\r\n                    className={props.btnClassName}\r\n                    disable={props.disableInc}\r\n                />\r\n\r\n                <Button\r\n                    name={'reset'}\r\n                    callback={resetCount}\r\n                    className={props.btnClassName}\r\n                    disable={props.disableReset}\r\n                />\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport css from './SetScreen.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../bll/store/store\";\r\nimport {AppType} from \"../App\";\r\nimport {setMaxCountAC, setStartCountAC, switchValueIsSetAC} from \"../bll/store/counter-reducer\";\r\n\r\n\r\ntype SetScreenPropsType = {\r\n    error: boolean\r\n}\r\n\r\nexport const SetScreen = (props: SetScreenPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const counter = useSelector<RootReducerType, AppType>(state=> state.counter)\r\n\r\n    const inputClassName = `${css.input} ${props.error ? css.screen_error : ''}`\r\n\r\n    const maxValueOnChangeHandler = (event: ChangeEvent<HTMLInputElement> ) => {\r\n        dispatch(setMaxCountAC(+event.currentTarget.value))\r\n        dispatch(switchValueIsSetAC(false))\r\n    }\r\n    const minValueOnChangeHandler = (event: ChangeEvent<HTMLInputElement> ) => {\r\n        dispatch(setStartCountAC(+event.currentTarget.value))\r\n        dispatch(switchValueIsSetAC(false))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className={css.setScreenBox}>\r\n            <div className={css.value_input_box}>\r\n                <span className={css.spanText}>max value:</span>\r\n                <input\r\n                    className={inputClassName}\r\n                    value={counter.maxCount}\r\n                    type=\"number\"\r\n                    onChange={maxValueOnChangeHandler}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <span className={css.spanText}>start value:</span>\r\n                <input\r\n                    className={inputClassName}\r\n                    value={counter.startCount}\r\n                    type=\"number\"\r\n                    onChange={minValueOnChangeHandler}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}","import React from 'react';\r\nimport css from \"../App.module.css\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {AppType} from \"../App\";\r\nimport {SetScreen} from \"../SetScreen/SetScreen\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../bll/store/store\";\r\nimport {setCurrentCountAC, switchValueIsSetAC} from \"../bll/store/counter-reducer\";\r\n\r\ntype SetComponentPropsType = {\r\n    disableSet: boolean\r\n    error: boolean\r\n    btnClassName: string\r\n\r\n}\r\n\r\n\r\nexport const SetComponent = (props: SetComponentPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const counter = useSelector<RootReducerType, AppType>(state => state.counter)\r\n\r\n    const setValueByButton = () => {\r\n        dispatch(switchValueIsSetAC(!counter.valueIsSet))\r\n        dispatch(setCurrentCountAC(counter.startCount))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <SetScreen\r\n                error={props.error}\r\n            />\r\n\r\n            <div className={css.button_block}>\r\n\r\n                <Button\r\n                    name={'set'}\r\n                    callback={setValueByButton}\r\n                    className={props.btnClassName}\r\n                    disable={props.disableSet}\r\n                />\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.module.css';\r\nimport css from './App.module.css'\r\nimport {CountComponent} from \"./CountCopmponent/CountComponent\";\r\nimport {SetComponent} from \"./SetComponent/SetComponent\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./bll/store/store\";\r\nimport {switchErrorAC} from \"./bll/store/counter-reducer\";\r\n\r\nexport type AppType = {\r\n    startCount: number\r\n    maxCount: number\r\n    currentCount: number\r\n    valueIsSet: boolean\r\n}\r\n\r\nexport const App = () => {\r\n\r\n    const counter = useSelector<RootReducerType, AppType>(state=> state.counter)\r\n    const dispatch=useDispatch()\r\n\r\n\r\n    const disableInc = (counter.currentCount === counter.maxCount) || (!counter.valueIsSet)\r\n    const disableReset = (counter.currentCount === counter.startCount) || (!counter.valueIsSet)\r\n    const disableSet = (counter.startCount < 0) || (counter.startCount >= counter.maxCount) || (counter.valueIsSet)\r\n    const error = disableInc && disableReset && disableSet\r\n    dispatch(switchErrorAC(error))\r\n\r\n\r\n    const btnClassName = css.button\r\n    return (\r\n\r\n        <div className={css.main}>\r\n\r\n\r\n            <div className={css.screen}>\r\n                <SetComponent\r\n                    disableSet={disableSet}\r\n                    error={error}\r\n                    btnClassName={btnClassName}\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className={css.screen}>\r\n                <CountComponent\r\n                    disableInc={disableInc}\r\n                    disableReset={disableReset}\r\n                    btnClassName={btnClassName}\r\n                />\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState, saveState} from \"../../utils/localstorage-utils\";\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nconst preloadedState = loadState()\r\n\r\n\r\nexport const store = createStore(rootReducer, preloadedState)\r\n\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n})\r\n","import {RootReducerType, store} from \"../bll/store/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('counter-state')\r\n        if (serializedState === null) {\r\n            return undefined\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state: RootReducerType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem('counter-state', serializedState)\r\n    } catch {\r\n        //ignore write errors\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n    <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__1onwO\",\"screen\":\"App_screen__3O1zX\",\"button_block\":\"App_button_block__2uV6H\",\"button\":\"App_button__1cJ8T\",\"disable\":\"App_disable__1cubr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setScreenBox\":\"SetScreen_setScreenBox__2pLGD\",\"spanText\":\"SetScreen_spanText__3BiXA\",\"value_input_box\":\"SetScreen_value_input_box__3K1T2\",\"input\":\"SetScreen_input__18Qt-\",\"screen_error\":\"SetScreen_screen_error__2GS1V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"CountScreen_screen__3ftdw\",\"red\":\"CountScreen_red__2RK6m\",\"span_set\":\"CountScreen_span_set__3GH_u\"};"],"sourceRoot":""}